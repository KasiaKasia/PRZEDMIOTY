-- ======================================
-- Projekt 7: System zarzƒÖdzania flotƒÖ pojazd√≥w - 
/*
Baza danych z tabelami dla pojazd√≥w (id, marka, model, rok_produkcji, stan), kierowc√≥w (id, imiƒô, nazwisko, data_prawa_jazdy), wypo≈ºycze≈Ñ (id, id_pojazdu, id_kierowcy, data_wypozyczenia, data_zwrotu, kilometraz).

Procedura: Procedura zakoncz_wypozyczenie, kt√≥ra ko≈Ñczy wypo≈ºyczenie, oblicza przejechane kilometry i aktualizuje stan pojazdu.

Funkcja: Funkcja sprawdz_waznosc_prawa_jazdy, kt√≥ra sprawdza, czy prawo jazdy jest wa≈ºne (u≈ºywajƒÖc DATE_ADD(data_prawa_jazdy, INTERVAL 10 YEAR) i por√≥wnujƒÖc z CURDATE()).

Wyzwalacz (Trigger): Trigger przed_wypozyczeniem, kt√≥ry przed dodaniem wypo≈ºyczenia sprawdza stan pojazdu i blokuje je≈õli niedostƒôpny.

Raporty: Raport sumujƒÖcy koszty utrzymania ‚Äì bilans kilometr√≥w przejechanych per pojazd (SUM(kilometraz) GROUP BY id_pojazdu), np. SELECT id_pojazdu, SUM(kilometraz) AS suma_km FROM wypozyczenia GROUP BY id_pojazdu;.

Zapytania z funkcjami dat/string√≥w: Zapytanie wyszukujƒÖce wypo≈ºyczenia z ostatniego kwarta≈Çu z konkatenacjƒÖ marki i modelu (CONCAT(marka, ' ', model)) i obliczeniem czasu wypo≈ºyczenia (TIMESTAMPDIFF(DAY, data_wypozyczenia, data_zwrotu)).
*/

DROP TABLE IF EXISTS log_wypozyczen;
DROP TABLE IF EXISTS wypozyczenia;
DROP TABLE IF EXISTS kierowcy;
DROP TABLE IF EXISTS pojazdy;

 

CREATE TABLE pojazdy (
    id INT PRIMARY KEY AUTO_INCREMENT,
    marka VARCHAR(50) NOT NULL,
    model VARCHAR(50) NOT NULL,
    rok_produkcji YEAR NOT NULL,
    stan ENUM('dostƒôpny', 'niedostƒôpny') DEFAULT 'dostƒôpny'
);

CREATE TABLE kierowcy (
    id INT PRIMARY KEY AUTO_INCREMENT,
    imie VARCHAR(100) NOT NULL,
    nazwisko VARCHAR(100) NOT NULL,
    data_prawa_jazdy DATE NOT NULL
);

CREATE TABLE wypozyczenia (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_pojazdu INT NOT NULL,
    id_kierowcy INT NOT NULL,
    data_wypozyczenia DATETIME NOT NULL,
    data_zwrotu DATETIME,
    kilometraz INT DEFAULT 0,
    FOREIGN KEY (id_pojazdu) REFERENCES pojazdy(id),
    FOREIGN KEY (id_kierowcy) REFERENCES kierowcy(id)
);

CREATE TABLE log_wypozyczen (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_wypozyczenia INT,
    data_zdarzenia TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    komunikat VARCHAR(255)
);

 

INSERT INTO pojazdy (marka, model, rok_produkcji, stan)
VALUES
('Toyota', 'Corolla', 2020, 'dostƒôpny'),
('Volkswagen', 'Golf', 2018, 'dostƒôpny'),
('Ford', 'Focus', 2019, 'niedostƒôpny');

INSERT INTO kierowcy (imie, nazwisko, data_prawa_jazdy)
VALUES
('Adam', 'Kowalski', '2010-05-12'),
('Ewa', 'Nowak', '2015-03-21');

/*
Wyzwalacz (Trigger): Trigger przed_wypozyczeniem, kt√≥ry przed dodaniem wypo≈ºyczenia sprawdza stan pojazdu i blokuje je≈õli niedostƒôpny.
*/

DELIMITER $$

CREATE TRIGGER przed_wypozyczeniem
BEFORE INSERT ON wypozyczenia
FOR EACH ROW
BEGIN
    DECLARE pojazd_stan VARCHAR(15);

    -- Sprawdzenie, czy pojazd jest dostƒôpny
    SELECT stan INTO pojazd_stan
    FROM pojazdy
    WHERE id = NEW.id_pojazdu;

    IF pojazd_stan = 'niedostƒôpny' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = '‚ùå Pojazd jest obecnie niedostƒôpny i nie mo≈ºe byƒá wypo≈ºyczony.';
    ELSE
        -- Zmieniamy stan pojazdu na niedostƒôpny po wypo≈ºyczeniu
        UPDATE pojazdy
        SET stan = 'niedostƒôpny'
        WHERE id = NEW.id_pojazdu;

        -- Logujemy wypo≈ºyczenie
        INSERT INTO log_wypozyczen (id_wypozyczenia, komunikat)
        VALUES (NULL, CONCAT('üöó Pojazd ID ', NEW.id_pojazdu, ' zosta≈Ç wypo≈ºyczony przez kierowcƒô ID ', NEW.id_kierowcy, '.'));
    END IF;
END$$

DELIMITER ;

-- ======================================
-- Testowe dane wypo≈ºyczenia
-- ======================================

-- ‚úÖ Powinno siƒô udaƒá (Toyota - dostƒôpna)
INSERT INTO wypozyczenia (id_pojazdu, id_kierowcy, data_wypozyczenia, data_zwrotu, kilometraz)
VALUES (1, 1, '2025-10-19 09:00:00', '2025-10-20 09:00:00', 250);

-- ‚ùå Powinno siƒô nie udaƒá (Ford - niedostƒôpny)
-- INSERT INTO wypozyczenia (id_pojazdu, id_kierowcy, data_wypozyczenia, data_zwrotu, kilometraz)
-- VALUES (3, 2, '2025-10-19 09:00:00', '2025-10-21 09:00:00', 300);

-- ======================================
-- Sprawdzenie wynik√≥w
-- ======================================
-- SELECT * FROM pojazdy;
-- SELECT * FROM log_wypozyczen;
-- SELECT * FROM wypozyczenia;
